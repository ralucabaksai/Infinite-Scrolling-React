{"version":3,"sources":["images/image.js","images/image-list.js","app.js","serviceWorker.js","index.js"],"names":["Image","props","console","log","className","Card","Img","variant","src","download_url","alt","author","Body","Title","ImageList","state","images","page","totalPages","scrolling","loadImages","url","fetch","then","data","json","imagesJson","setState","handleScroll","e","toatalPages","window","innerHeight","document","documentElement","scrollTop","offsetHeight","loadMore","prevState","this","addEventListener","Container","Row","map","image","index","Col","xs","md","key","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wVAkBeA,MAdf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,SACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKP,EAAMQ,aAAcC,IAAKT,EAAMU,SAC5D,kBAACN,EAAA,EAAKO,KAAN,KACE,kBAACP,EAAA,EAAKQ,MAAN,gBAAqBZ,EAAMU,Y,wBC0DtBG,E,4MAhEbC,MAAQ,CACNC,OAAQ,GACRC,KAAM,EACNC,WAAY,KACZC,WAAW,G,EAQbC,WAAa,WAAO,IAAD,EACQ,EAAKL,MAAtBE,EADS,EACTA,KAAMD,EADG,EACHA,OACRK,EAAG,6CAAyCJ,EAAzC,aACTK,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAGL,EAAKC,SAAS,CAAEX,OAAO,GAAD,mBAAMA,GAAN,YAAiBU,IAAaP,WAAW,Q,EAIrES,aAAe,SAACC,GAAO,IAAD,EACqB,EAAKd,MAD1B,EACZE,KADY,EACNa,YADM,EACOX,WAKzBY,OAAOC,YAAcC,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBE,cAEzB,EAAKC,Y,EAITA,SAAW,WAET,EAAKV,UACH,SAACW,GAAD,MAAgB,CACdrB,KAAMqB,EAAUrB,KAAO,EACvBE,WAAW,KAEb,EAAKC,a,kEApCPmB,KAAKnB,aAELW,OAAOS,iBAAiB,SAAUD,KAAKX,gB,+BAyCvC,OAFA1B,QAAQC,IAAIoC,KAAKxB,OAGf,kBAAC0B,EAAA,EAAD,CAAWrC,UAAU,cACnB,kBAACsC,EAAA,EAAD,KACGH,KAAKxB,MAAMC,OAAO2B,KAAI,SAACC,EAAOC,GAAR,OACrB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,IAAKJ,GACvB,kBAAC,EAAUD,a,GAzDDM,IAAMC,WCSfC,MATf,WACE,OACE,yBAAKhD,UAAU,OACb,mDACA,kBAAC,EAAD,QCIciD,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.5040b185.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./image.css\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nfunction Image(props) {\r\n  console.log(props);\r\n  return (\r\n    <div className='image'>\r\n      <Card>\r\n        <Card.Img variant='top' src={props.download_url} alt={props.author} />\r\n        <Card.Body>\r\n          <Card.Title>Author: {props.author}</Card.Title>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\nimport Image from \"./image\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\n\r\nclass ImageList extends React.Component {\r\n  state = {\r\n    images: [],\r\n    page: 0,\r\n    totalPages: null,\r\n    scrolling: false,\r\n  };\r\n  componentDidMount() {\r\n    //call API to lad first page\r\n    this.loadImages();\r\n    //listen for scroll\r\n    window.addEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n  loadImages = () => {\r\n    const { page, images } = this.state;\r\n    const url = `https://picsum.photos/v2/list?page=${page}&limit=10`;\r\n    fetch(url)\r\n      .then((data) => data.json())\r\n      .then((imagesJson) => {\r\n        //   console.log(imagesJson);\r\n        // modify the state with images from fetch\r\n        this.setState({ images: [...images, ...imagesJson], scrolling: false });\r\n        //   console.log(this.state)\r\n      });\r\n  };\r\n  handleScroll = (e) => {\r\n    const { page, toatalPages, scrolling } = this.state;\r\n    // if scrollind do nothing\r\n    if (scrolling) return;\r\n    // if you get to the bottom of the page call loadMore\r\n    if (\r\n      window.innerHeight + document.documentElement.scrollTop ===\r\n      document.documentElement.offsetHeight\r\n    ) {\r\n      this.loadMore();\r\n    }\r\n  };\r\n\r\n  loadMore = () => {\r\n    // change page in state to page+1 and scrolling to true and call loadImages to gest nest page from Api\r\n    this.setState(\r\n      (prevState) => ({\r\n        page: prevState.page + 1,\r\n        scrolling: true,\r\n      }),\r\n      this.loadImages\r\n    );\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    // display on page every the elements from the state.images array\r\n    return (\r\n      <Container className='image_list'>\r\n        <Row>\r\n          {this.state.images.map((image, index) => (\r\n            <Col xs={12} md={4} key={index}>\r\n              <Image {...image} />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default ImageList;\r\n","import React from \"react\";\nimport \"./app.css\";\nimport ImageList from \"./images/image-list\";\n\nfunction App() {\n  return (\n    <div className='app'>\n      <h1>Lorem picsum images</h1>\n      <ImageList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}